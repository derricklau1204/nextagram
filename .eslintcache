[{"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/index.js":"1","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/reportWebVitals.js":"2","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/App.js":"3","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/UserProfilePage.js":"4","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/HomePage.js":"5","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/NavBarDisplay.js":"6","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/AuthModal.js":"7","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/LoginForm.js":"8","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/SignUpForm.js":"9","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/MyProfilePage.js":"10","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/Loader.js":"11","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/containers/UserImages.js":"12","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/UploadPage.js":"13"},{"size":686,"mtime":1607826769215,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607326027482,"results":"16","hashOfConfig":"15"},{"size":1380,"mtime":1607851762448,"results":"17","hashOfConfig":"15"},{"size":845,"mtime":1607851920315,"results":"18","hashOfConfig":"15"},{"size":1598,"mtime":1607852055110,"results":"19","hashOfConfig":"15"},{"size":2019,"mtime":1607853629498,"results":"20","hashOfConfig":"15"},{"size":728,"mtime":1607668151583,"results":"21","hashOfConfig":"15"},{"size":2875,"mtime":1607828928727,"results":"22","hashOfConfig":"15"},{"size":6764,"mtime":1607828954963,"results":"23","hashOfConfig":"15"},{"size":926,"mtime":1607829687962,"results":"24","hashOfConfig":"15"},{"size":160,"mtime":1607851706250,"results":"25","hashOfConfig":"15"},{"size":1104,"mtime":1607851526631,"results":"26","hashOfConfig":"15"},{"size":2934,"mtime":1607833090836,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"kf61c1",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/index.js",[],["58","59"],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/reportWebVitals.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/App.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/UserProfilePage.js",["60"],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/HomePage.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/NavBarDisplay.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/AuthModal.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/LoginForm.js",["61"],"import React, {useState} from 'react';\nimport {ModalHeader,ModalBody,ModalFooter,Button,Form,FormGroup,Label,Input} from 'reactstrap';\nimport axios from 'axios';\nimport {toast} from 'react-toastify';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginForm = ({toggleIsLogin,toggle,setLoggedIn}) =>{\n    const [username,setUsername]=useState(\"\")\n    const [password,setPassword]=useState(\"\")\n    const history = useHistory()\n   \n\n    const handleLogin =(e)=>{\n        e.preventDefault()\n\n        axios({\n            method: 'post',\n            url: 'https://insta.nextacademy.com/api/v1/login',\n            data: {\n              username: username,\n              password: password\n            }\n          })\n          .then(result =>{\n              console.log(result)\n              localStorage.setItem('jwt',result.data.auth_token)\n              setLoggedIn(true)\n              setUsername('')\n              setPassword('')\n              toggle()\n              history.push(\"/profile\")\n\n              toast.success(\"Successfully Signed In! Yay!\", {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                });\n    \n                localStorage.setItem(\"user\",JSON.stringify(result.data.user))\n          })\n          \n           \n            .catch(error => {\n                console.error(error)\n              })\n    }\n    \n\n\n    return <>\n     <Form>\n        <ModalHeader toggle={toggle} charCode=\"x\">Log In</ModalHeader>\n            <ModalBody>\n            \n            <FormGroup row>\n                <Label for=\"username\">Username</Label>\n                <Input type=\"username\" name=\"username\" id=\"username\" placeholder=\"username\" value={username} onChange={(e)=>{\n                    setUsername(e.target.value)\n                }}/>\n            </FormGroup>\n            <FormGroup row>\n                <Label for=\"Password\">Password</Label>\n                <Input type=\"password\" name=\"password\" id=\"Password\" placeholder=\"password\" value={password} onChange={(e)=>{\n                    setPassword(e.target.value)\n                }} />\n            </FormGroup>\n            <p>New member? <a href=\"#\" onClick={(e)=>{\n                e.preventDefault()\n                toggleIsLogin()\n\n            }}>Sign up here</a></p>\n        \n            <div>\n            <button onClick={toggleIsLogin}>Go to sign up</button>\n            </div>\n\n            </ModalBody> \n            <ModalFooter>\n            <Button color=\"primary\" disabled={!(username && password)}  onClick={handleLogin}>Login</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n    </Form>\n    </>\n}\n\n\nexport default LoginForm;   ","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/SignUpForm.js",["62","63","64","65"],"import React, {useEffect, useState} from 'react';\nimport {ModalHeader,ModalBody,ModalFooter,Button,Form,FormGroup,Label,Input,FormText,FormFeedback} from 'reactstrap';\nimport axios from 'axios';\nimport {toast} from \"react-toastify\";\nimport {useHistory} from 'react-router-dom';\n\nconst SignUpForm = ({toggleIsLogin, toggle, setLoggedIn}) => {\n  const history = useHistory()\n    const [username,setUsername]=useState(\"\")\n    const [email,setEmail]=useState(\"\")\n    const [password,setPassword]=useState(\"\")\n    const [confirmPassword,setConfirmPassword]=useState(\"\")\n    const [delay, setDelay] = useState(null);\n    const [usernameValid, setUsernameValid] = useState(true);\n    const [passwordValid,setPasswordValid] = useState(true);\n\n    const checkUsername = newUsername => {\n        // this should only trigger after you stop typing for 500ms\n        console.log(\"Making API call to check username!\");\n        axios\n          .get(\n            `https://insta.nextacademy.com/api/v1/users/check_name?username=${newUsername}`\n          )\n          .then(response => {\n            console.log(response.data);\n            if (response.data.valid) {\n              setUsernameValid(true);\n            } else {\n              setUsernameValid(false);\n            }\n          });\n      };\n      const handleInput = e => {\n          if(e.target.name===\"username\"){\n            // clears queue so that the old keystrokes don't trigger axios call\n            clearTimeout(delay);\n            const newUsername = e.target.value;\n            setUsername(newUsername);\n\n            // put each new keystroke into the queue\n            const newDelay = setTimeout(() => {\n            checkUsername(newUsername);\n            }, 500);\n\n            setDelay(newDelay);\n          }\n          if(e.target.name===\"email\"){\n          setEmail(e.target.value)\n        }\n          if(e.target.name ===\"password\"){\n              setPassword(e.target.value)\n          }\n          if(e.target.name===\"confirmPassword\"){  \n              setConfirmPassword(e.target.value)\n          }\n      };\n\n      const getInputProp = () => {\n        if (!username.length) {\n          return null;\n        }\n    \n        if (username.length <= 6) {\n          return { invalid: true };\n        }\n    \n        if (usernameValid) {\n          return { valid: true };\n        } else {\n          return { invalid: true };\n        }\n      };\n    \n      const getFormFeedback = () => {\n        if (!username.length) {\n          return null;\n        }\n    \n        if (username.length <= 6) {\n          return <FormFeedback invalid>Must be at least 6 characters</FormFeedback>;\n        }\n    \n        if (usernameValid) {\n          return <FormFeedback valid>Sweet! That name is available</FormFeedback>;\n        } else {\n          return <FormFeedback invalid>Sorry! Username is taken</FormFeedback>;\n        }\n      };\n\n    const getPwInputProps =()=>{\n        if(confirmPassword.length ==0){\n            return null\n        }\n        if(password===confirmPassword){\n            return {valid:true}\n        }\n        else{\n            return {invalid:true}\n        }\n    }\n    const checkPassword =()=>{\n        if(!confirmPassword.length){\n            return null\n        }\n        if(password===confirmPassword){\n            return <FormText valid>Passwords match!</FormText>\n        }\n        else{\n            return<FormText invalid>Passwords do not match</FormText>\n        }\n    }\n      \n    useEffect(()=>{\n        if(password == confirmPassword){\n            setPasswordValid(true)\n        }else{\n            setPasswordValid(false)\n        }\n    },[confirmPassword])\n\n    const handleSubmit =()=>{\n        axios({\n            method: 'POST',\n            url: 'https://insta.nextacademy.com/api/v1/users/',\n            data: {\n              username: username,\n              email: email,\n              password: password\n            }\n          })\n          .then(response => {\n            console.log(response)\n            toggle()\n          \n         \n          toast(response.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            });\n\n            setLoggedIn(true)\n            localStorage.setItem('jwt', response.data.auth_token)\n            history.push(\"/profile\")\n        })\n        \n          .catch(error => {\n            console.error(error.response) // so that we know what went wrong if the request failed\n          })\n    }\n\n    const checkFormValid =()=>{\n        return!(username && email && passwordValid)\n    }\n    \n    return <>\n     <Form>\n        <ModalHeader toggle={toggle} charCode=\"x\">Sign Up</ModalHeader>\n            <ModalBody>\n            <FormGroup row>\n                <Label for=\"username\">Username</Label>\n                <Input type=\"text\" \n                name=\"username\" \n               value={username} \n               onChange={handleInput}\n               {...getInputProp()}\n               />\n               {getFormFeedback()}\n                 <FormText>Enter a username between 6 and 20 characters</FormText>\n\n            </FormGroup>\n            <FormGroup row>\n                <Label for=\"email\">Email</Label>\n                <Input \n                type=\"email\" \n                name=\"email\" \n                value={email} \n                onChange={handleInput} />\n            </FormGroup>\n            <FormGroup row>\n                <Label for=\"Passord\">Password</Label>\n                <Input \n                type=\"password\" \n                name=\"password\" \n                value={password} \n                onChange={handleInput}/>\n            </FormGroup>\n            <FormGroup row>\n                <Label for=\"Passord\" >Confirm Password</Label>\n                <Input \n                type=\"confirmPassword\" \n                name=\"confirmPassword\" \n                value={confirmPassword} \n                onChange={handleInput}\n                {...getPwInputProps()}/> \n                {checkPassword()}\n            </FormGroup>\n            <p>Already a member? <a href=\"#\" onClick={(e)=>{\n                e.preventDefault()\n                toggleIsLogin()\n\n            }}>Log in here</a></p>\n        \n            <div>\n            <button onClick={toggleIsLogin}>Go to log in</button>\n            </div>\n\n            </ModalBody> \n            <ModalFooter>\n            <Button \n            color=\"primary\" \n            disabled={checkFormValid()} \n            onClick={handleSubmit}>Submit</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n    </Form>\n    </>\n}\n\nexport default SignUpForm;","/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/MyProfilePage.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/components/Loader.js",["66"],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/containers/UserImages.js",[],"/Users/derricklau/Desktop/NEXT/day14/nextagramp/src/pages/UploadPage.js",["67","68"],"import React, {useRef, useState} from 'react';\nimport {Form,FormGroup,Input,FormText,Button} from 'reactstrap';\nimport axios from 'axios';\n\nconst UploadPage =()=>{\n    const [imageValue,setImageValue] = useState(null)\n    const [imageFile,setImageFile]=useState(null)\n    const [previewImage, setPreviewImage] = useState(null)\n    const [message, setMessage] = useState('')\n    return(\n        <div>\n            <h1>Upload your image!</h1>\n            <Form onSubmit={\n                (e)=>{\n                    e.preventDefault()\n                    let token = localStorage.getItem(\"jwt\")\n                    let formData = new FormData();\n                    // Append the key:value pair to the formData object\n                    formData.append(\"image\", imageFile);\n\n                    axios.post(\"https://insta.nextacademy.com/api/v1/images/\",\n                        formData,{ \n                            headers:{Authorization:\"Bearer\" + token}\n                    })\n                    .then(\n                        response=>{\n                            if (response.data.success) {\n                                setMessage(\"Image Uploaded Successfully!\")\n                                setPreviewImage(null)\n                                setImageFile(null)\n                                setImageValue(null)\n                            }                      \n                           }\n                    )\n                    .catch (error =>{\n                        console.log(error)\n                    })\n                  }\n                }>\n                <FormGroup>\n                    <Input\n                    type=\"file\"\n                    name=\"image-file\"\n                    value={imageValue}\n                    onChange={\n                        (e)=>{\n                            setImageValue( e.target.value)\n                            setPreviewImage(URL.createObjectURL(e.target.files[0]))\n                            setImageFile(e.target.files[0])\n                        }\n                    }\n                    />\n                    <FormText color=\"muted\">\n                    Make sure the image being uploaded is a supported format.\n                    </FormText>\n                </FormGroup>\n                <Button type=\"submit\" color=\"primary\">\n                    Upload\n                </Button>\n                </Form>\n              \n                <div className=\"card\">\n                {previewImage ? (\n                    <img\n                    src={previewImage}\n                    width=\"50%\"\n                    height=\"50%\"\n                    />\n                    ) : (\n                    <h3  className=\"text-center\">\n                    {message ? message : \"Live Preview\"}\n                    </h3>\n                )}\n                </div>\n\n                        </div>\n                    )\n                }\n\n\nexport default UploadPage;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":25,"column":13,"nodeType":"75","endLine":25,"endColumn":104},{"ruleId":"76","severity":1,"message":"77","line":71,"column":28,"nodeType":"75","endLine":75,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":91,"column":35,"nodeType":"80","messageId":"81","endLine":91,"endColumn":37},{"ruleId":"78","severity":1,"message":"79","line":114,"column":21,"nodeType":"80","messageId":"81","endLine":114,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":119,"column":7,"nodeType":"84","endLine":119,"endColumn":24,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"77","line":202,"column":34,"nodeType":"75","endLine":206,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":7,"column":9,"nodeType":"75","endLine":7,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":64,"column":21,"nodeType":"75","endLine":68,"endColumn":23},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.","ArrayExpression",["94"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [confirmPassword, password]",{"range":"97","text":"98"},[3611,3628],"[confirmPassword, password]"]